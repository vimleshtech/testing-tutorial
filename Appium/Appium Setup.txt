What is Appium?
=========================================================
Appium is an open source test automation tool developed and supported by "Sauce Labs" to automate native and hybrid mobile apps. It is basically know as a
	 -------------------------------------- 
Cross-Platform Mobile Automation Tool. It uses JSON wire protocol internally to interact with iOS and Android native apps using the Selenium WebDriver.

There are many other automation tools available in market to automate mobile native apps like MonkeyTalk, KIF, Calabash and Frank but most of those tools 
		---------------------------------------
require an extra agent needs to be compiled with your application code so that the tool can interact with the mobile app.

Commands
=========================================================
$java --version 
$adb version
$adb devices

$adb install <local_path_to_.apk>
$adb logcat > <local_path_to_text_file>		--capture log

Set up Appium with Eclipse on Windows
=========================================================
Step 1: Install the Java Development Kit (JDK)
Step 2: Set Up Java Environment Variable Path
Step 3: Install Android SDK / ADB on Windows
Step 4: Install Android SDK Packages
Step 5: Set up Android Environment Variable

Step 6: Download and Install NodeJs  (ReactNative)
Step 7: Install Microsoft .net Framework

Step 8: Download And Install Appium Desktop Client
Step 9: Enabling Developer Mode Options on Android Phone or Tablet
Step 10: Install PdaNet to Connect with Android Device

Step 11: Install Eclipse IDE And Set up a Project
Step 12: Set Up Appium Project in Eclipse
Step 13: First Appium Test to Launch Amazon App 

Appium On Mac
===========================================
Step 1: Install JDK, Eclipse on Mac OS
Step 2: Deploy Application to Real IOS Device
Step 3: SetUp Appium on Mac
Step 4: Build & Run Xcode Project
Step 5: Appium Test on Real IOS Device 


Appium Tutorial
=================================================
Chapter 1: How to use Appium UIAutomatorViewer
Chapter 2: How to use Locators in Appium
Chapter 3: Inspect elements of Mobile Web Application
Chapter 4: How to Inspect and Automate WebView in Hybrid App 

Chapter 5: Execute Appium Test with TestNG
Chapter 6: How to perform Parallel Execution in Appium with TestNG
Chapter 7: How to find aapPackage & aapActivity

Chapter 8: How to transfer APK file from Phone to PC
Chapter 9: ADB Commands
Chapter 10: How to Connect Android Device to PC using Wifi
Chapter 11: How to Create an Android Virtual Device using Android Emulator
Chapter 12: Creating Custom Device Definition Using AVD Manager

=============
How to Locate Element using UIAutomatorViewer?

Follow the steps to check if the device is connected properly:

1. Go to Run and type ‘cmd’ for opening the Command Prompt interface.
Type ‘adb devices‘ in the window.

On the actual device, open the app to the page you want to automate. In our case we are doing the demo on amazon app.

3) Browse your Android installation folder and go to the following directory to open UIAutomatorViewer:

Android -> android-sdk -> tools -> uiautomatorviewer.bat 

2. On my machine the default location of the Android folder is ‘C:\Users\lsharm\AppData\Local\Android\‘ which I followed in this tutorial.

4) In UIAutomatorViewer, click on Device screenshot (marked below second button).


===================
import io.appium.java_client.android.AndroidDriver;
 
import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.List;
import java.util.concurrent.TimeUnit;
 
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.remote.CapabilityType;
import org.openqa.selenium.remote.DesiredCapabilities;
 
public class Amazon_LogIn_Test {
 private static AndroidDriver driver;
 
 public static void main(String[] args) throws MalformedURLException {


 File classpathRoot = new File(System.getProperty("user.dir"));
 File appDir = new File(classpathRoot, "/Apps/Amazon/");
 File app = new File(appDir, "in.amazon.mShop.android.shopping.apk");
 
 DesiredCapabilities capabilities = new DesiredCapabilities();
 capabilities.setCapability(CapabilityType.BROWSER_NAME, "");
 capabilities.setCapability("deviceName", "Micromax A311");
 capabilities.setCapability("platformVersion", "4.4.2");
 capabilities.setCapability("platformName", "Android");
 capabilities.setCapability("app", app.getAbsolutePath());
 capabilities.setCapability("appPackage", "in.amazon.mShop.android.shopping");
 capabilities.setCapability("appActivity", "com.amazon.mShop.home.HomeActivity");
 
 driver = new AndroidDriver(new URL("http://127.0.0.1:4723/wd/hub"), capabilities);
 driver.manage().timeouts().implicitlyWait(80, TimeUnit.SECONDS);
 
 // Click on Shop by Deparment link
 driver.findElementById("in.amazon.mShop.android.shopping:id/web_home_shop_by_department_label").click();
 // Click on Main menu
 driver.findElementByClassName("android.widget.ImageView").click();
 // Click on Home link under Main menu
 driver.findElement(By.name("Home")).click();
 // Click on Sign In link on the Home Screen
 driver.findElementByName("Sign inHello. Link").click();
 
 // Entering UserName using Parent node strategy
 WebElement parentElement = driver.findElement(By.name("Amazon Sign In"));
 List<WebElement> childElements = parentElement.findElements(By.className("android.view.View"));
 WebElement mainElement = childElements.get(4);
 mainElement.findElement(By.className("android.widget.EditText")).sendKeys("Your_UserName");
 // Entering Password using Xpath & Sibling strategy
 driver.findElementByXPath("//android.view.View[@content-desc='Password']/following-sibling::android.view.View/android.widget.EditText").sendKeys("Your_Password");
 // Click on Sign In button
 driver.findElement(By.name("Sign in")).click();
 // This is to kill the Android driver
 driver.quit();
 
 }
 
}


What is an Emulator?
An Emulator is an application that emulates real mobile device software, hardware and operating systems, allowing us to test and debug our application. It is generally provided by device manufacturer. Mobile emulators are free and provided as a part of SDK with each new OS release. As a developer or a tester, you can configure the emulator closely resemble the devices on which you plan to deploy your application.

Creating a New Android Virtual Device using AVD Manager
First step is to launch the AVD Manager and for that there are number of options you can follow:

Launch AVD Manager using Program Menu
Go to Start > All Program > Android SDK Tools > AVD Manager
Launch AVD Manager using Command Line
Go to Run and type cmd to open command prompt window. Type Android AVD.
Launch AVD Manager from folder location
Browse to Android SDK folder and Double-click on AVD Manager.

